
# PYTHONPATH must include directory above plugin directory.
#     Define either externally or here, then import plugin.
sys.path.insert(0, './..')
import syshfwplug
import psi4


plugin_load("./syshfwplug.so")


molecule mymol {
Au 
Au 1 2.0
symmetry c1
}

set {
  basis def2-svp
}

set syshfwplug {
  pref mytest
  dryrun false
  do_tei false
  do_oei true
  do_rijk false
  do_rimp2 false
  print 1
}

set scf reference rhf
set scf_type pk
set scf PRINT_MOS  true

e_scf,ref_wfn = energy('scf',return_wfn=True)

#ref_wfn = psi4.core.Wavefunction.build(mymol , psi4.core.get_global_option('BASIS'))
aux     = psi4.core.BasisSet.build(mymol, "DF_BASIS_SCF", "", "JKFIT", psi4.core.get_global_option('BASIS'))
aux2    = psi4.core.BasisSet.build(mymol, "DF_BASIS_MP2", "", "RIFIT", psi4.core.get_global_option('BASIS'))

ref_wfn.set_basisset("JKFIT",aux)
ref_wfn.set_basisset("RIFIT",aux2)

plugin("syshfwplug.so", ref_wfn)

energy("ccsd(t)")

#C = psi4.core.Matrix(ref_wfn.basisset().nbf(),ref_wfn.basisset().nbf())
#df = psi4.core.DFTensor(ref_wfn.basisset(), aux, C, 5 , ref_wfn.basisset().nbf()-5 )

#BQ2 = np.asarray(df.Qso())


#mints = MintsHelper(ref_wfn.basisset())
#I = np.asarray(mints.ao_eri())

#print "Check some ints:"
#for i in range(ref_wfn.basisset().nbf()):
#	print "{:16.8f} {:16.8f} {:16.8f} ".format(I[i,0,0,0] , np.sum([BQ2[Q][i,0]*BQ2[Q][0][0] for Q in range(aux.nbf())]), np.sum([BQ[Q][i,0]*BQ[Q][0][0] for Q in range(aux.nbf())]))

#syshfwplug.exampleFN(Qmn)

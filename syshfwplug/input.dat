
# PYTHONPATH must include directory above plugin directory.
#     Define either externally or here, then import plugin.
sys.path.insert(0, './..')
import syshfwplug
import psi4


plugin_load("./syshfwplug.so")


molecule mymol {
Au  15.46012769633866      9.61558254931152      5.63932638465879
Au  11.64872643980839      7.19201686204225      4.52188108900534
Au  13.76391911802176      7.51467176609757      6.07606163194554
Au  14.48869652492774     12.96562176397272      1.70889114052432
Au  14.99635112865957     11.30742068617374      3.67945376470927
Au  11.17544754404223      8.96208959594042      2.49055162734085
Au  12.81759281400961     10.97538499955030      2.07860163480764
Au  13.30133713089205      9.23339647908150      4.09907552291825
symmetry c1
}

set {
  basis def2-qzvpp
}

set syshfwplug {
  pref mytest
  dryrun true
  do_tei false
  do_oei true
  do_rijk true
  do_rimp2 true
  print 1
}

set scf reference rhf
set scf_type pk
set scf PRINT_MOS  true

#e_scf,ref_wfn = energy('mp2',return_wfn=True)

ref_wfn = psi4.core.Wavefunction.build(mymol , psi4.core.get_global_option('BASIS'))
aux     = psi4.core.BasisSet.build(mymol, "DF_BASIS_SCF", "", "JKFIT", psi4.core.get_global_option('BASIS'))
aux2    = psi4.core.BasisSet.build(mymol, "DF_BASIS_MP2", "", "RIFIT", psi4.core.get_global_option('BASIS'))

ref_wfn.set_basisset("JKFIT",aux)
ref_wfn.set_basisset("RIFIT",aux2)

plugin("syshfwplug.so", ref_wfn)

#C = psi4.core.Matrix(ref_wfn.basisset().nbf(),ref_wfn.basisset().nbf())
#df = psi4.core.DFTensor(ref_wfn.basisset(), aux, C, 5 , ref_wfn.basisset().nbf()-5 )

#BQ2 = np.asarray(df.Qso())


#mints = MintsHelper(ref_wfn.basisset())
#I = np.asarray(mints.ao_eri())

#print "Check some ints:"
#for i in range(ref_wfn.basisset().nbf()):
#	print "{:16.8f} {:16.8f} {:16.8f} ".format(I[i,0,0,0] , np.sum([BQ2[Q][i,0]*BQ2[Q][0][0] for Q in range(aux.nbf())]), np.sum([BQ[Q][i,0]*BQ[Q][0][0] for Q in range(aux.nbf())]))

#syshfwplug.exampleFN(Qmn)
